apply plugin: "dev.architectury.loom"

architectury {
    injectInjectables = false
    platformSetupLoomIde()
    forge()
}

loom {
    forge {
        mixinConfig "protoweaver.mixins.json"
    }
    //accessWidenerPath = project(":loader-common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    shadowCommon(api(project(path: ":loader-common", configuration: "default")))
    shadowCommon(api(project(path: ":loader-common", configuration: "transformProductionForge"))) { transitive false }

    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    forge "net.minecraftforge:forge:${project.forge_version}"

    modImplementation "maven.modrinth:proxy-compatible-forge:${project.proxy_forge_version}"
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    minimize()
}

jar.finalizedBy(shadowJar)

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}
